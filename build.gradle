plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.asciidoctor.jvm.convert" version "3.3.2"	// asciidoctor plugin 추가
	id "org.sonarqube" version "3.3"					// SonarQube
}

group = 'com.example'
version = '1.1.0-SNAPSHOT'
sourceCompatibility = '11'

compileJava.options.encoding = 'UTF-8'

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')	// snippets 파일을 저장할 디렉토리 생성
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir	// 생성된 파일을 미리 생성한 디렉토리(build/generated-snippets)에 저장
}

asciidoctor {
	inputs.dir snippetsDir	// snippets 디렉토리를 입력으로 함
	dependsOn test			// test task를 의존, 문서 생성 전에 test를 수행
}

asciidoctor.doFirst {
	// delete file('src/main/resources/templates/docs')	// 기존 파일 삭제
}

bootJar {
	dependsOn asciidoctor						// asciidoctor를 의존, bootJar 생성 전에 asciidoctor task를 수행
	from("build/docs/asciidoc"){ 	// 문서 생성 시, Jar 파일 내 static/docs에 복사되도록 함
		into 'BOOT-INF/classes/static/docs'
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/templates/docs")
}

build {
	// dependsOn copyDocument
}

clean {
	delete file('src/main/generated')
}

dependencies {
	// spring
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// oauth
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// mongo db
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// aws
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'

	// firebase
	implementation 'com.google.firebase:firebase-admin:8.1.0'

	// json parse
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	// http request
	implementation 'com.squareup.okhttp3:okhttp:4.2.2'

	// tika
	implementation 'org.apache.tika:tika-core:1.24.1'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// runtime - database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}
